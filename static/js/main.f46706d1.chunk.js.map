{"version":3,"sources":["components/NewTodo/NewTodo.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["NewTodo","state","inputValue","handleSubmit","event","preventDefault","_this","onAdd","props","setState","handleInputChange","value","target","this","react_default","a","createElement","onSubmit","type","className","placeholder","onChange","React","Component","TodoList","_ref","todos","toggleTodoCompleteness","removeTodo","map","todo","completed","checked","id","title","onClick","TodosFilter","filterIdentifier","toggleFilterIdentifier","removeCompletedTodos","Fragment","href","filter","length","style","display","App","originalTodos","idCounter","handleAddTodo","prevState","concat","Object","toConsumableArray","_objectSpread","_this$state","amountOfActiveTodos","components_NewTodo_NewTodo","htmlFor","components_TodoList_TodoList","components_TodosFilter_TodosFilter","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f46706d1.chunk.js","sourcesContent":["import React from 'react';\n\nclass NewTodo extends React.Component {\n  state = {\n    inputValue: '',\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { inputValue } = this.state;\n    const { onAdd } = this.props;\n\n    if (inputValue) {\n      onAdd(inputValue);\n\n      this.setState({\n        inputValue: '',\n      });\n    }\n  };\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  };\n\n  render() {\n    const { inputValue } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={inputValue}\n          onChange={this.handleInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nexport default NewTodo;\n","import React from 'react';\n\nconst TodoList = ({\n  todos,\n  toggleTodoCompleteness,\n  removeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <li className={todo.completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => toggleTodoCompleteness(todo.id)}\n          />\n          <label className=\"todo\">{todo.title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(todo.id)}\n          />\n        </div>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n","import React from 'react';\n\nconst TodosFilter = ({\n  todos,\n  filterIdentifier,\n  toggleFilterIdentifier,\n  removeCompletedTodos,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={filterIdentifier === 'all' ? 'completed' : ''}\n          //onClick={toggleFilterIdentifier('all')}\n        >\n          All\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/active\"\n          className={filterIdentifier === 'active' ? 'completed' : ''}\n          //onClick={toggleFilterIdentifier('active')}\n        >\n          Active\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/completed\"\n          className={filterIdentifier === 'completed' ? 'completed' : ''}\n          //onClick={toggleFilterIdentifier('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n    {todos.filter(todo => todo.completed).length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        //onClick={removeCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nexport default TodosFilter;\n","import React from 'react';\nimport NewTodo from './components/NewTodo/NewTodo';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    originalTodos: [],\n    idCounter: 0,\n    filterIdentifier: 'all',\n  };\n\n  handleAddTodo = (title) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        {\n          id: prevState.idCounter + 1,\n          title,\n          completed: false,\n        },\n      ],\n      originalTodos: [\n        {\n          id: prevState.idCounter + 1,\n          title,\n          completed: false,\n        },\n        ...prevState.todos,\n      ],\n      idCounter: prevState.idCounter + 1,\n    }));\n  };\n\n  /*toggleAllTodosCompleted = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].map(todo => ({\n        ...todo,\n        completed: prevState.todos.some(t => !t.completed),\n      })),\n    }));\n  };*/\n\n  toggleTodoCompleteness = (id) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n\n    //this.filterTodos();\n  };\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => todo.id !== id),\n    }));\n  };\n\n  /*toggleFilterIdentifier = (identifier) => {\n    this.setState({\n      filterIdentifier: identifier,\n    });\n    this.filterTodos();\n  };\n\n  filterTodos = () => {\n    this.setState((prevState) => {\n      const { filterIdentifier, originalTodos } = prevState;\n\n      if (filterIdentifier === 'all') {\n        return ({\n          todos: [...originalTodos],\n        });\n      }\n\n      if (filterIdentifier === 'active') {\n        return ({\n          todos: [...originalTodos].filter(todo => !todo.completed),\n        });\n      }\n\n      if (filterIdentifier === 'completed') {\n        return ({\n          todos: [...originalTodos].filter(todo => todo.completed),\n        });\n      }\n    });\n  };\n\n  removeCompletedTodos = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].filter(todo => !todo.completed),\n      originalTodos: [...prevState.originalTodos].filter(todo => !todo.completed),\n    }));\n  };*/\n\n  render() {\n    const { todos, filterIdentifier } = this.state;\n    const amountOfActiveTodos = todos.filter(todo => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo onAdd={this.handleAddTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            //onClick={this.toggleAllTodosCompleted}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={todos}\n            toggleTodoCompleteness={this.toggleTodoCompleteness}\n            removeTodo={this.removeTodo}\n          />\n        </section>\n\n        {(todos.length > 0) && (\n          <footer className=\"footer\" style={{ display: 'block' }}>\n            <span className=\"todo-count\">\n              {amountOfActiveTodos}\n              {' '}\n              {amountOfActiveTodos === 1\n                ? 'item left'\n                : 'items left'\n              }\n            </span>\n            <TodosFilter\n              todos={todos}\n              filterIdentifier={filterIdentifier}\n              //toggleFilterIdentifier={this.toggleFilterIdentifier}\n              //removeCompletedTodos={this.removeCompletedTodos}\n            />\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}