{"version":3,"sources":["components/NewTodo/NewTodo.js","constants/proptypes.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["NewTodo","PropTypes","func","isRequired","arrayOf","shape","title","string","isCompleted","bool","state","inputValue","handleSubmit","event","preventDefault","_this","props","onAdd","setState","handleInputChange","_ref","value","target","replace","this","react_default","a","createElement","onSubmit","type","className","placeholder","onChange","React","Component","TodoList","todos","toggleTodoCompleteness","removeTodo","map","todo","key","id","checked","onClick","TodosFilter","filterIdentifier","toggleFilterIdentifier","removeCompletedTodos","Fragment","href","filter","length","style","display","App","originalTodos","idCounter","handleAddTodo","prevState","concat","Object","toConsumableArray","filterTodos","toggleAllTodosCompleted","_objectSpread","some","t","identifier","_this$state","amountOfActiveTodos","components_NewTodo_NewTodo","htmlFor","components_TodoList_TodoList","components_TodosFilter_TodosFilter","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d3f9ce5b.chunk.js","sourcesContent":["import React from 'react';\nimport { NewTodoPropTypes } from '../../constants/proptypes';\n\nclass NewTodo extends React.Component {\n  state = {\n    inputValue: '',\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { inputValue } = this.state;\n\n    if (inputValue) {\n      this.props.onAdd(inputValue);\n\n      this.setState({\n        inputValue: '',\n      });\n    }\n  };\n\n  handleInputChange = ({ target: { value } }) => {\n    this.setState({\n      inputValue: value.replace(/^\\s+/, ''),\n    });\n  };\n\n  render() {\n    const { inputValue } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={inputValue}\n          onChange={this.handleInputChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = NewTodoPropTypes;\n\nexport default NewTodo;\n","import PropTypes from 'prop-types';\n\nexport const NewTodoPropTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n\nexport const TodoListPropTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      isCompleted: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  toggleTodoCompleteness: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nexport const TodosFilterPropTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      isCompleted: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterIdentifier: PropTypes.string.isRequired,\n  toggleFilterIdentifier: PropTypes.func.isRequired,\n  removeCompletedTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoListPropTypes } from '../../constants/proptypes';\n\nconst TodoList = ({\n  todos,\n  toggleTodoCompleteness,\n  removeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <li className={todo.isCompleted ? 'completed' : ''} key={todo.id}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.isCompleted}\n            onChange={() => toggleTodoCompleteness(todo.id)}\n          />\n          <label className=\"todo\">{todo.title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => removeTodo(todo.id)}\n          />\n        </div>\n      </li>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = TodoListPropTypes;\n\nexport default TodoList;\n","import React from 'react';\nimport { TodosFilterPropTypes } from '../../constants/proptypes';\n\nconst TodosFilter = ({\n  todos,\n  filterIdentifier,\n  toggleFilterIdentifier,\n  removeCompletedTodos,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={filterIdentifier === 'all' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('all')}\n        >\n          All\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/active\"\n          className={filterIdentifier === 'active' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('active')}\n        >\n          Active\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/completed\"\n          className={filterIdentifier === 'completed' ? 'selected' : ''}\n          onClick={() => toggleFilterIdentifier('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n    {todos.filter(todo => todo.isCompleted).length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={removeCompletedTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </>\n);\n\nTodosFilter.propTypes = TodosFilterPropTypes;\n\nexport default TodosFilter;\n","import React from 'react';\nimport NewTodo from './components/NewTodo/NewTodo';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    originalTodos: [],\n    idCounter: 0,\n    filterIdentifier: 'all',\n  };\n\n  handleAddTodo = (title) => {\n    this.setState(prevState => ({\n      originalTodos: [\n        ...prevState.originalTodos,\n        {\n          id: prevState.idCounter + 1,\n          title,\n          isCompleted: false,\n        },\n      ],\n\n      idCounter: prevState.idCounter + 1,\n    }));\n\n    this.filterTodos();\n  };\n\n  filterTodos = () => {\n    this.setState((prevState) => {\n      const { filterIdentifier, originalTodos } = prevState;\n\n      if (filterIdentifier === 'active') {\n        return ({\n          todos: originalTodos.filter(todo => !todo.isCompleted),\n        });\n      }\n\n      if (filterIdentifier === 'completed') {\n        return ({\n          todos: originalTodos.filter(todo => todo.isCompleted),\n        });\n      }\n\n      return ({\n        todos: [...originalTodos],\n      });\n    });\n  };\n\n  toggleAllTodosCompleted = () => {\n    this.setState(prevState => ({\n      originalTodos: prevState.originalTodos.map(todo => ({\n        ...todo,\n        isCompleted: prevState.originalTodos.some(t => !t.isCompleted),\n      })),\n    }));\n\n    this.filterTodos();\n  };\n\n  toggleTodoCompleteness = (id) => {\n    this.setState(prevState => ({\n      originalTodos: prevState.originalTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            isCompleted: !todo.isCompleted,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n\n    this.filterTodos();\n  };\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      originalTodos: prevState.originalTodos\n        .filter(todo => todo.id !== id),\n    }));\n\n    this.filterTodos();\n  };\n\n  toggleFilterIdentifier = (identifier) => {\n    this.setState({\n      filterIdentifier: identifier,\n    });\n\n    this.filterTodos();\n  };\n\n  removeCompletedTodos = () => {\n    this.setState(prevState => ({\n      originalTodos: prevState.originalTodos\n        .filter(todo => !todo.isCompleted),\n    }));\n\n    this.filterTodos();\n  };\n\n  render() {\n    const { todos, originalTodos, filterIdentifier } = this.state;\n    const amountOfActiveTodos = originalTodos\n      .filter(todo => !todo.isCompleted).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo onAdd={this.handleAddTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.toggleAllTodosCompleted}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={todos}\n            toggleTodoCompleteness={this.toggleTodoCompleteness}\n            removeTodo={this.removeTodo}\n          />\n        </section>\n\n        {(originalTodos.length > 0) && (\n          <footer className=\"footer\" style={{ display: 'block' }}>\n            <span className=\"todo-count\">\n              {amountOfActiveTodos}\n              {' '}\n              {amountOfActiveTodos === 1\n                ? 'item left'\n                : 'items left'\n              }\n            </span>\n            <TodosFilter\n              todos={todos}\n              filterIdentifier={filterIdentifier}\n              toggleFilterIdentifier={this.toggleFilterIdentifier}\n              removeCompletedTodos={this.removeCompletedTodos}\n            />\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}